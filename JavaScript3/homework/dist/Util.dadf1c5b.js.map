{"version":3,"sources":["Util.js"],"names":["Util","name","parent","options","elem","document","createElement","appendChild","Object","keys","forEach","key","value","textContent","setAttribute","url","Promise","resolve","reject","xhr","XMLHttpRequest","open","responseType","onload","status","response","Error","statusText","onerror","send"],"mappings":"AAAA,cAEA;;;;;;;;IACMA;;;;;;;;;oCACqBC,MAAMC,QAAsB;AAAA,UAAdC,OAAc,uEAAJ,EAAI;AAC/C,UAAMC,IAAI,GAAGC,QAAQ,CAACC,aAAT,CAAuBL,IAAvB,CAAb;AACAC,MAAAA,MAAM,CAACK,WAAP,CAAmBH,IAAnB;AACAI,MAAAA,MAAM,CAACC,IAAP,CAAYN,OAAZ,EAAqBO,OAArB,CAA6B,UAAAC,GAAG,EAAI;AAChC,YAAMC,KAAK,GAAGT,OAAO,CAACQ,GAAD,CAArB;;AACA,YAAIA,GAAG,KAAK,MAAZ,EAAoB;AAChBP,UAAAA,IAAI,CAACS,WAAL,GAAmBD,KAAnB;AACH,SAFD,MAEO;AACHR,UAAAA,IAAI,CAACU,YAAL,CAAkBH,GAAlB,EAAuBC,KAAvB;AACH;AACJ,OAPD;AAQA,aAAOR,IAAP;AACH;;;8BAEgBW,KAAK;AAClB,aAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,YAAMC,GAAG,GAAG,IAAIC,cAAJ,EAAZ;AACAD,QAAAA,GAAG,CAACE,IAAJ,CAAS,KAAT,EAAgBN,GAAhB;AACAI,QAAAA,GAAG,CAACG,YAAJ,GAAmB,MAAnB;;AACAH,QAAAA,GAAG,CAACI,MAAJ,GAAa,YAAM;AACf,cAAIJ,GAAG,CAACK,MAAJ,GAAa,GAAjB,EAAsB;AAClBP,YAAAA,OAAO,CAACE,GAAG,CAACM,QAAL,CAAP;AACH,WAFD,MAEO;AACHP,YAAAA,MAAM,CAAC,IAAIQ,KAAJ,0BAA4BP,GAAG,CAACK,MAAhC,gBAA4CL,GAAG,CAACQ,UAAhD,EAAD,CAAN;AACH;AACJ,SAND;;AAOAR,QAAAA,GAAG,CAACS,OAAJ,GAAc;AAAA,iBAAMV,MAAM,CAAC,IAAIQ,KAAJ,CAAU,wBAAV,CAAD,CAAZ;AAAA,SAAd;;AACAP,QAAAA,GAAG,CAACU,IAAJ;AACH,OAbM,CAAP;AAcH","file":"Util.dadf1c5b.js","sourceRoot":"..","sourcesContent":["'use strict';\n\n// eslint-disable-next-line no-unused-vars\nclass Util {\n    static createAndAppend(name, parent, options = {}) {\n        const elem = document.createElement(name);\n        parent.appendChild(elem);\n        Object.keys(options).forEach(key => {\n            const value = options[key];\n            if (key === 'text') {\n                elem.textContent = value;\n            } else {\n                elem.setAttribute(key, value);\n            }\n        });\n        return elem;\n    }\n\n    static fetchJSON(url) {\n        return new Promise((resolve, reject) => {\n            const xhr = new XMLHttpRequest();\n            xhr.open('GET', url);\n            xhr.responseType = 'json';\n            xhr.onload = () => {\n                if (xhr.status < 400) {\n                    resolve(xhr.response);\n                } else {\n                    reject(new Error(`Network error: ${xhr.status} - ${xhr.statusText}`));\n                }\n            };\n            xhr.onerror = () => reject(new Error('Network request failed'));\n            xhr.send();\n        });\n    }\n}"]}